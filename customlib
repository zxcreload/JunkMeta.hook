local Library = {}

local NeverloseVersion = "v2.0.0"

local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")

-- Clear existing Neverlose UI
for _, v in next, game.CoreGui:GetChildren() do
    if v:IsA("ScreenGui") and v.Name == "Neverlose" then
        v:Destroy()
    end
end

local themouse = game.Players.LocalPlayer:GetMouse()

-- Notification function
local function Notify(title, text)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5
    })
end

-- Dragging functionality
local function Dragify(frame, parent)
    parent = parent or frame
    local dragging = false
    local dragInput, mousePos, framePos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    InputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            parent.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Rounding function
local function round(num, bracket)
    bracket = bracket or 1
    local a = math.floor(num / bracket + (math.sign(num) * 0.5)) * bracket
    if a < 0 then
        a = a + bracket
    end
    return a
end

-- Button hover effect
local function buttonEffect(options)
    pcall(function()
        options.entered.MouseEnter:Connect(function()
            if options.frame.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                TweenService:Create(options.frame, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 80)
                }):Play()
            end
        end)
        options.entered.MouseLeave:Connect(function()
            if options.frame.TextColor3 ~= Color3.fromRGB(150, 150, 180) then
                TweenService:Create(options.frame, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                    TextColor3 = Color3.fromRGB(150, 150, 180),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                }):Play()
            end
        end)
    end)
end

-- Button click effect
local function clickEffect(options)
    options.button.MouseButton1Click:Connect(function()
        local originalSize = options.button.TextSize
        local newSize = originalSize - tonumber(options.amount)
        TweenService:Create(options.button, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            TextSize = newSize
        }):Play()
        wait(0.1)
        TweenService:Create(options.button, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
            TextSize = originalSize
        }):Play()
    end)
end

-- Toggle UI visibility
function Library:Toggle(value)
    local gui = game.CoreGui:FindFirstChild("Neverlose")
    if not gui then return end
    enabled = (type(value) == "boolean" and value) or gui.Enabled
    gui.Enabled = not enabled
end

-- Main Window
function Library:Window(options)
    options.text = options.text or "NEVERLOSE"

    local SG = Instance.new("ScreenGui")
    SG.Name = "Neverlose"
    SG.Parent = game.CoreGui

    local Body = Instance.new("Frame")
    Body.Name = "Body"
    Body.Parent = SG
    Body.AnchorPoint = Vector2.new(0.5, 0.5)
    Body.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    Body.Position = UDim2.new(0.5, 0, 0.5, 0)
    Body.Size = UDim2.new(0, 700, 0, 550)
    Body.BorderSizePixel = 0
    Dragify(Body)

    local BodyCorner = Instance.new("UICorner")
    BodyCorner.CornerRadius = UDim.new(0, 8)
    BodyCorner.Parent = Body

    local BodyGradient = Instance.new("UIGradient")
    BodyGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 50))
    })
    BodyGradient.Parent = Body

    local SideBar = Instance.new("Frame")
    SideBar.Name = "SideBar"
    SideBar.Parent = Body
    SideBar.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    SideBar.Size = UDim2.new(0, 200, 1, 0)
    SideBar.BorderSizePixel = 0

    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 8)
    SidebarCorner.Parent = SideBar

    local SidebarLine = Instance.new("Frame")
    SidebarLine.Name = "SidebarLine"
    SidebarLine.Parent = SideBar
    SidebarLine.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    SidebarLine.Position = UDim2.new(1, -2, 0, 0)
    SidebarLine.Size = UDim2.new(0, 2, 1, 0)
    SidebarLine.BorderSizePixel = 0

    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = Body
    TopBar.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    TopBar.BackgroundTransparency = 0.5
    TopBar.Position = UDim2.new(0.286, 0, 0, 0)
    TopBar.Size = UDim2.new(0.714, 0, 0, 50)
    TopBar.BorderSizePixel = 0

    local TopBarLine = Instance.new("Frame")
    TopBarLine.Name = "TopBarLine"
    TopBarLine.Parent = TopBar
    TopBarLine.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    TopBarLine.Position = UDim2.new(0, 0, 1, -1)
    TopBarLine.Size = UDim2.new(1, 0, 0, 1)
    TopBarLine.BorderSizePixel = 0

    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = SideBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.05, 0, 0.02, 0)
    Title.Size = UDim2.new(0.9, 0, 0, 30)
    Title.Font = Enum.Font.SourceSansPro
    Title.Text = options.text
    Title.TextColor3 = Color3.fromRGB(0, 255, 255)
    Title.TextSize = 24
    Title.TextWrapped = true

    local AllPages = Instance.new("Frame")
    AllPages.Name = "AllPages"
    AllPages.Parent = Body
    AllPages.BackgroundTransparency = 1
    AllPages.Position = UDim2.new(0.286, 0, 0.1, 0)
    AllPages.Size = UDim2.new(0.714, 0, 0.9, 0)

    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Parent = SideBar
    TabContainer.BackgroundTransparency = 1
    TabContainer.Position = UDim2.new(0, 0, 0.1, 0)
    TabContainer.Size = UDim2.new(1, 0, 0.9, 0)

    local tabsections = {}

    function tabsections:TabSection(options)
        options.text = options.text or "Tab Section"

        local TabLayout = Instance.new("UIListLayout")
        TabLayout.Name = "TabLayout"
        TabLayout.Parent = TabContainer
        TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabLayout.Padding = UDim.new(0, 5)

        local TabSection = Instance.new("Frame")
        TabSection.Name = "TabSection"
        TabSection.Parent = TabContainer
        TabSection.BackgroundTransparency = 1
        TabSection.Size = UDim2.new(1, 0, 0, 25)

        local function ResizeTS(num)
            TabSection.Size = TabSection.Size + UDim2.new(0, 0, 0, num)
        end

        local TabSectionLabel = Instance.new("TextLabel")
        TabSectionLabel.Name = "TabSectionLabel"
        TabSectionLabel.Parent = TabSection
        TabSectionLabel.BackgroundTransparency = 1
        TabSectionLabel.Size = UDim2.new(1, 0, 0, 25)
        TabSectionLabel.Font = Enum.Font.SourceSansPro
        TabSectionLabel.Text = "  " .. options.text
        TabSectionLabel.TextColor3 = Color3.fromRGB(100, 100, 150)
        TabSectionLabel.TextSize = 16
        TabSectionLabel.TextXAlignment = Enum.TextXAlignment.Left

        local TabSectionLayout = Instance.new("UIListLayout")
        TabSectionLayout.Name = "TabSectionLayout"
        TabSectionLayout.Parent = TabSection
        TabSectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabSectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabSectionLayout.Padding = UDim.new(0, 5)

        local tabs = {}

        function tabs:Tab(options)
            options.text = options.text or "New Tab"
            options.icon = options.icon or "rbxassetid://7999345313"

            local TabButton = Instance.new("TextButton")
            TabButton.Name = "TabButton"
            TabButton.Parent = TabSection
            TabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
            TabButton.Size = UDim2.new(0.95, 0, 0, 35)
            TabButton.AutoButtonColor = false
            TabButton.Font = Enum.Font.SourceSansPro
            TabButton.Text = "  " .. options.text
            TabButton.TextColor3 = Color3.fromRGB(150, 150, 180)
            TabButton.TextSize = 16
            TabButton.TextXAlignment = Enum.TextXAlignment.Left
            buttonEffect({frame = TabButton, entered = TabButton})

            local TabButtonCorner = Instance.new("UICorner")
            TabButtonCorner.CornerRadius = UDim.new(0, 6)
            TabButtonCorner.Parent = TabButton

            local TabIcon = Instance.new("ImageLabel")
            TabIcon.Name = "TabIcon"
            TabIcon.Parent = TabButton
            TabIcon.BackgroundTransparency = 1
            TabIcon.Position = UDim2.new(0.05, 0, 0.2, 0)
            TabIcon.Size = UDim2.new(0, 20, 0, 20)
            TabIcon.Image = options.icon
            TabIcon.ImageColor3 = Color3.fromRGB(0, 255, 255)

            local NewPage = Instance.new("ScrollingFrame")
            NewPage.Name = "NewPage"
            NewPage.Parent = AllPages
            NewPage.Visible = false
            NewPage.BackgroundTransparency = 1
            NewPage.Size = UDim2.new(1, 0, 1, 0)
            NewPage.ScrollBarThickness = 2
            NewPage.ScrollBarImageColor3 = Color3.fromRGB(0, 255, 255)
            NewPage.CanvasSize = UDim2.new(0, 0, 0, 0)

            local PageLayout = Instance.new("UIGridLayout")
            PageLayout.Name = "PageLayout"
            PageLayout.Parent = NewPage
            PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
            PageLayout.CellPadding = UDim2.new(0, 10, 0, 10)
            PageLayout.CellSize = UDim2.new(0, 230, 0, 150)
            PageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                NewPage.CanvasSize = UDim2.new(0, 0, 0, PageLayout.AbsoluteContentSize.Y)
            end)

            TabButton.MouseButton1Click:Connect(function()
                for _, v in next, AllPages:GetChildren() do
                    v.Visible = false
                end
                NewPage.Visible = true

                for _, v in next, SideBar:GetDescendants() do
                    if v:IsA("TextButton") then
                        TweenService:Create(v, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                        }):Play()
                    end
                end

                TweenService:Create(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 80)
                }):Play()
            end)

            ResizeTS(40)

            local sections = {}

            function sections:Section(options)
                options.text = options.text or "Section"

                local SectionFrame = Instance.new("Frame")
                SectionFrame.Name = "SectionFrame"
                SectionFrame.Parent = NewPage
                SectionFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
                SectionFrame.Size = UDim2.new(0, 230, 0, 150)

                local SectionCorner = Instance.new("UICorner")
                SectionCorner.CornerRadius = UDim.new(0, 6)
                SectionCorner.Parent = SectionFrame

                local SectionLabel = Instance.new("TextLabel")
                SectionLabel.Name = "SectionLabel"
                SectionLabel.Parent = SectionFrame
                SectionLabel.BackgroundTransparency = 1
                SectionLabel.Position = UDim2.new(0.05, 0, 0, 0)
                SectionLabel.Size = UDim2.new(0.95, 0, 0, 25)
                SectionLabel.Font = Enum.Font.SourceSansPro
                SectionLabel.Text = options.text
                SectionLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
                SectionLabel.TextSize = 16
                SectionLabel.TextXAlignment = Enum.TextXAlignment.Left

                local SectionLine = Instance.new("Frame")
                SectionLine.Name = "SectionLine"
                SectionLine.Parent = SectionFrame
                SectionLine.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
                SectionLine.Position = UDim2.new(0.05, 0, 0, 25)
                SectionLine.Size = UDim2.new(0.95, 0, 0, 1)

                local SectionLayout = Instance.new("UIListLayout")
                SectionLayout.Name = "SectionLayout"
                SectionLayout.Parent = SectionFrame
                SectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
                SectionLayout.Padding = UDim.new(0, 5)

                local SectionSizeConstraint = Instance.new("UISizeConstraint")
                SectionSizeConstraint.Name = "SectionSizeConstraint"
                SectionSizeConstraint.Parent = SectionFrame
                SectionSizeConstraint.MinSize = Vector2.new(230, 40)

                local function Resize(num)
                    SectionSizeConstraint.MinSize = SectionSizeConstraint.MinSize + Vector2.new(0, num)
                end

                local elements = {}

                function elements:Button(options)
                    if not options.text or not options.callback then
                        Notify("Button", "Missing arguments!")
                        return
                    end

                    local TextButton = Instance.new("TextButton")
                    TextButton.Parent = SectionFrame
                    TextButton.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    TextButton.Size = UDim2.new(0.95, 0, 0, 25)
                    TextButton.AutoButtonColor = false
                    TextButton.Font = Enum.Font.SourceSansPro
                    TextButton.Text = options.text
                    TextButton.TextColor3 = Color3.fromRGB(150, 150, 180)
                    TextButton.TextSize = 14
                    buttonEffect({frame = TextButton, entered = TextButton})
                    clickEffect({button = TextButton, amount = 3})
                    TextButton.MouseButton1Click:Connect(options.callback)

                    local ButtonCorner = Instance.new("UICorner")
                    ButtonCorner.CornerRadius = UDim.new(0, 4)
                    ButtonCorner.Parent = TextButton

                    Resize(30)
                end

                function elements:Toggle(options)
                    if not options.text or not options.callback then
                        Notify("Toggle", "Missing arguments!")
                        return
                    end

                    local ToggleLabel = Instance.new("TextLabel")
                    ToggleLabel.Name = "ToggleLabel"
                    ToggleLabel.Parent = SectionFrame
                    ToggleLabel.BackgroundTransparency = 1
                    ToggleLabel.Size = UDim2.new(0.95, 0, 0, 25)
                    ToggleLabel.Font = Enum.Font.SourceSansPro
                    ToggleLabel.Text = options.text
                    ToggleLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
                    ToggleLabel.TextSize = 14
                    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = ToggleLabel, entered = ToggleLabel})

                    local ToggleFrame = Instance.new("TextButton")
                    ToggleFrame.Name = "ToggleFrame"
                    ToggleFrame.Parent = ToggleLabel
                    ToggleFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    ToggleFrame.AnchorPoint = Vector2.new(0.5, 0.5)
                    ToggleFrame.Position = UDim2.new(0.9, 0, 0.5, 0)
                    ToggleFrame.Size = UDim2.new(0, 40, 0, 20)
                    ToggleFrame.AutoButtonColor = false
                    ToggleFrame.Text = ""
                    ToggleFrame.MouseButton1Click:Connect(function()
                        PerformToggle()
                    end)

                    local ToggleFrameCorner = Instance.new("UICorner")
                    ToggleFrameCorner.CornerRadius = UDim.new(1, 0)
                    ToggleFrameCorner.Parent = ToggleFrame

                    local ToggleButton = Instance.new("TextButton")
                    ToggleButton.Name = "ToggleButton"
                    ToggleButton.Parent = ToggleFrame
                    ToggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                    ToggleButton.AnchorPoint = Vector2.new(0.5, 0.5)
                    ToggleButton.Position = UDim2.new(0.25, 0, 0.5, 0)
                    ToggleButton.Size = UDim2.new(0, 18, 0, 18)
                    ToggleButton.AutoButtonColor = false
                    ToggleButton.Text = ""
                    ToggleButton.MouseButton1Click:Connect(function()
                        PerformToggle()
                    end)

                    local ToggleButtonCorner = Instance.new("UICorner")
                    ToggleButtonCorner.CornerRadius = UDim.new(1, 0)
                    ToggleButtonCorner.Parent = ToggleButton

                    local State = options.state or false

                    if State then
                        ToggleButton.Position = UDim2.new(0.75, 0, 0.5, 0)
                        ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
                        ToggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 80)
                    end

                    local function PerformToggle()
                        State = not State
                        options.callback(State)
                        TweenService:Create(ToggleButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                            Position = State and UDim2.new(0.75, 0, 0.5, 0) or UDim2.new(0.25, 0, 0.5, 0),
                            BackgroundColor3 = State and Color3.fromRGB(0, 255, 255) or Color3.fromRGB(100, 100, 100)
                        }):Play()
                        TweenService:Create(ToggleLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                            TextColor3 = State and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(150, 150, 180)
                        }):Play()
                        TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                            BackgroundColor3 = State and Color3.fromRGB(50, 50, 80) or Color3.fromRGB(30, 30, 50)
                        }):Play()
                    end

                    Resize(30)
                end

                function elements:Slider(options)
                    if not options.text or not options.min or not options.max or not options.callback then
                        Notify("Slider", "Missing arguments!")
                        return
                    end

                    local Slider = Instance.new("Frame")
                    Slider.Name = "Slider"
                    Slider.Parent = SectionFrame
                    Slider.BackgroundTransparency = 1
                    Slider.Size = UDim2.new(0.95, 0, 0, 25)

                    local SliderLabel = Instance.new("TextLabel")
                    SliderLabel.Name = "SliderLabel"
                    SliderLabel.Parent = Slider
                    SliderLabel.BackgroundTransparency = 1
                    SliderLabel.AnchorPoint = Vector2.new(0, 0.5)
                    SliderLabel.Position = UDim2.new(0, 0, 0.5, 0)
                    SliderLabel.Size = UDim2.new(0.5, 0, 0, 25)
                    SliderLabel.Font = Enum.Font.SourceSansPro
                    SliderLabel.Text = options.text
                    SliderLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
                    SliderLabel.TextSize = 14
                    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = SliderLabel, entered = Slider})

                    local SliderFrame = Instance.new("TextButton")
                    SliderFrame.Name = "SliderFrame"
                    SliderFrame.Parent = Slider
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    SliderFrame.AnchorPoint = Vector2.new(0, 0.5)
                    SliderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
                    SliderFrame.Size = UDim2.new(0.35, 0, 0, 4)
                    SliderFrame.Text = ""
                    SliderFrame.AutoButtonColor = false

                    local SliderFrameCorner = Instance.new("UICorner")
                    SliderFrameCorner.CornerRadius = UDim.new(1, 0)
                    SliderFrameCorner.Parent = SliderFrame

                    local SliderBall = Instance.new("TextButton")
                    SliderBall.Name = "SliderBall"
                    SliderBall.Parent = SliderFrame
                    SliderBall.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
                    SliderBall.AnchorPoint = Vector2.new(0.5, 0.5)
                    SliderBall.Position = UDim2.new(0, 0, 0.5, 0)
                    SliderBall.Size = UDim2.new(0, 12, 0, 12)
                    SliderBall.Text = ""
                    SliderBall.AutoButtonColor = false

                    local SliderBallCorner = Instance.new("UICorner")
                    SliderBallCorner.CornerRadius = UDim.new(1, 0)
                    SliderBallCorner.Parent = SliderBall

                    local SliderTextBox = Instance.new("TextBox")
                    SliderTextBox.Name = "SliderTextBox"
                    SliderTextBox.Parent = Slider
                    SliderTextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    SliderTextBox.AnchorPoint = Vector2.new(0, 0.5)
                    SliderTextBox.Position = UDim2.new(0.85, 0, 0.5, 0)
                    SliderTextBox.Size = UDim2.new(0.15, 0, 0, 20)
                    SliderTextBox.Font = Enum.Font.SourceSansPro
                    SliderTextBox.Text = tostring(options.min)
                    SliderTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                    SliderTextBox.TextSize = 12
                    SliderTextBox.TextWrapped = true

                    local SliderTextBoxCorner = Instance.new("UICorner")
                    SliderTextBoxCorner.CornerRadius = UDim.new(0, 4)
                    SliderTextBoxCorner.Parent = SliderTextBox

                    local Value
                    local Held = false
                    local percentage = 0
                    local step = 0.01

                    local function snap(number, factor)
                        if factor == 0 then
                            return number
                        else
                            return math.floor(number / factor + 0.5) * factor
                        end
                    end

                    InputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false
                        end
                    end)

                    SliderFrame.MouseButton1Down:Connect(function()
                        Held = true
                    end)

                    SliderBall.MouseButton1Down:Connect(function()
                        Held = true
                    end)

                    game:GetService("RunService").RenderStepped:Connect(function()
                        if Held then
                            local MousePos = InputService:GetMouseLocation().X
                            local FrameSize = SliderFrame.AbsoluteSize.X
                            local FramePos = SliderFrame.AbsolutePosition.X
                            local pos = snap((MousePos - FramePos) / FrameSize, step)
                            percentage = math.clamp(pos, 0, 0.9)

                            Value = (((options.max - options.min) / 0.9) * percentage) + options.min
                            Value = round(Value, options.float or 1)
                            Value = math.clamp(Value, options.min, options.max)
                            SliderTextBox.Text = Value
                            options.callback(Value)
                            SliderBall.Position = UDim2.new(percentage, 0, 0.5, 0)
                        end
                    end)

                    SliderTextBox.Focused:Connect(function()
                        TweenService:Create(SliderLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                    end)

                    SliderTextBox.FocusLost:Connect(function(enter)
                        TweenService:Create(SliderLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(150, 150, 180)
                        }):Play()
                        if enter and SliderTextBox.Text ~= "" then
                            local num = tonumber(SliderTextBox.Text)
                            if num then
                                num = math.clamp(num, options.min, options.max)
                                SliderTextBox.Text = tostring(num)
                                options.callback(num)
                                percentage = (num - options.min) / (options.max - options.min) * 0.9
                                SliderBall.Position = UDim2.new(percentage, 0, 0.5, 0)
                            end
                        end
                    end)

                    Resize(30)
                end

                function elements:Dropdown(options)
                    if not options.text or not options.default or not options.list or not options.callback then
                        Notify("Dropdown", "Missing arguments!")
                        return
                    end

                    local Dropdown = Instance.new("Frame")
                    Dropdown.Name = "Dropdown"
                    Dropdown.Parent = SectionFrame
                    Dropdown.BackgroundTransparency = 1
                    Dropdown.Size = UDim2.new(0.95, 0, 0, 25)
                    Dropdown.ZIndex = 2

                    local DropdownLabel = Instance.new("TextLabel")
                    DropdownLabel.Name = "DropdownLabel"
                    DropdownLabel.Parent = Dropdown
                    DropdownLabel.BackgroundTransparency = 1
                    DropdownLabel.Size = UDim2.new(0.5, 0, 1, 0)
                    DropdownLabel.Font = Enum.Font.SourceSansPro
                    DropdownLabel.Text = options.text
                    DropdownLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
                    DropdownLabel.TextSize = 14
                    DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = DropdownLabel, entered = Dropdown})

                    local DropdownText = Instance.new("TextLabel")
                    DropdownText.Name = "DropdownText"
                    DropdownText.Parent = Dropdown
                    DropdownText.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    DropdownText.Position = UDim2.new(0.5, 0, 0, 0)
                    DropdownText.Size = UDim2.new(0.5, 0, 0, 25)
                    DropdownText.Font = Enum.Font.SourceSansPro
                    DropdownText.Text = options.default
                    DropdownText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    DropdownText.TextSize = 14
                    DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                    DropdownText.TextWrapped = true

                    local DropdownTextCorner = Instance.new("UICorner")
                    DropdownTextCorner.CornerRadius = UDim.new(0, 4)
                    DropdownTextCorner.Parent = DropdownText

                    local DropdownArrow = Instance.new("ImageButton")
                    DropdownArrow.Name = "DropdownArrow"
                    DropdownArrow.Parent = DropdownText
                    DropdownArrow.BackgroundTransparency = 1
                    DropdownArrow.Position = UDim2.new(0.85, 0, 0.2, 0)
                    DropdownArrow.Size = UDim2.new(0, 15, 0, 15)
                    DropdownArrow.Image = "rbxassetid://8008296380"
                    DropdownArrow.ImageColor3 = Color3.fromRGB(0, 255, 255)

                    local DropdownList = Instance.new("Frame")
                    DropdownList.Name = "DropdownList"
                    DropdownList.Parent = DropdownText
                    DropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    DropdownList.Position = UDim2.new(0, 0, 1, 0)
                    DropdownList.Size = UDim2.new(1, 0, 0, 0)
                    DropdownList.ClipsDescendants = true
                    DropdownList.BorderSizePixel = 0
                    DropdownList.ZIndex = 10

                    local DropListLayout = Instance.new("UIListLayout")
                    DropListLayout.Name = "DropListLayout"
                    DropListLayout.Parent = DropdownList
                    DropListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    DropListLayout.Padding = UDim.new(0, 2)

                    local Dropped = false
                    local DropYSize = 0

                    for _, v in next, options.list do
                        local DropdownBtn = Instance.new("TextButton")
                        DropdownBtn.Name = "DropdownBtn"
                        DropdownBtn.Parent = DropdownList
                        DropdownBtn.BackgroundTransparency = 1
                        DropdownBtn.Size = UDim2.new(1, 0, 0, 25)
                        DropdownBtn.AutoButtonColor = false
                        DropdownBtn.Font = Enum.Font.SourceSansPro
                        DropdownBtn.Text = v
                        DropdownBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
                        DropdownBtn.TextSize = 14
                        DropdownBtn.ZIndex = 15
                        clickEffect({button = DropdownBtn, amount = 3})

                        DropdownBtn.MouseButton1Click:Connect(function()
                            DropdownText.Text = v
                            options.callback(v)
                            Dropped = false
                            TweenService:Create(DropdownList, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                                Size = UDim2.new(1, 0, 0, 0),
                                BorderSizePixel = 0
                            }):Play()
                            TweenService:Create(DropdownLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                                TextColor3 = Color3.fromRGB(150, 150, 180)
                            }):Play()
                        end)

                        DropYSize = DropYSize + 27
                    end

                    DropdownArrow.MouseButton1Click:Connect(function()
                        Dropped = not Dropped
                        TweenService:Create(DropdownList, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            Size = Dropped and UDim2.new(1, 0, 0, DropYSize) or UDim2.new(1, 0, 0, 0),
                            BorderSizePixel = Dropped and 1 or 0
                        }):Play()
                        TweenService:Create(DropdownLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Dropped and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(150, 150, 180)
                        }):Play()
                    end)

                    Resize(30)
                end

                function elements:Textbox(options)
                    if not options.text or not options.value or not options.callback then
                        Notify("Textbox", "Missing arguments!")
                        return
                    end

                    local Textbox = Instance.new("Frame")
                    Textbox.Name = "Textbox"
                    Textbox.Parent = SectionFrame
                    Textbox.BackgroundTransparency = 1
                    Textbox.Size = UDim2.new(0.95, 0, 0, 25)

                    local TextBoxLabel = Instance.new("TextLabel")
                    TextBoxLabel.Name = "TextBoxLabel"
                    TextBoxLabel.Parent = Textbox
                    TextBoxLabel.BackgroundTransparency = 1
                    TextBoxLabel.AnchorPoint = Vector2.new(0, 0.5)
                    TextBoxLabel.Position = UDim2.new(0, 0, 0.5, 0)
                    TextBoxLabel.Size = UDim2.new(0.5, 0, 0, 25)
                    TextBoxLabel.Font = Enum.Font.SourceSansPro
                    TextBoxLabel.Text = options.text
                    TextBoxLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
                    TextBoxLabel.TextSize = 14
                    TextBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = TextBoxLabel, entered = Textbox})

                    local TextBox = Instance.new("TextBox")
                    TextBox.Name = "TextBox"
                    TextBox.Parent = Textbox
                    TextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    TextBox.AnchorPoint = Vector2.new(0, 0.5)
                    TextBox.Position = UDim2.new(0.5, 0, 0.5, 0)
                    TextBox.Size = UDim2.new(0.5, 0, 0, 20)
                    TextBox.Font = Enum.Font.SourceSansPro
                    TextBox.Text = options.value
                    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                    TextBox.TextSize = 14
                    TextBox.TextWrapped = true

                    local TextBoxCorner = Instance.new("UICorner")
                    TextBoxCorner.CornerRadius = UDim.new(0, 4)
                    TextBoxCorner.Parent = TextBox

                    TextBox.Focused:Connect(function()
                        TweenService:Create(TextBoxLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                    end)

                    TextBox.FocusLost:Connect(function(enter)
                        TweenService:Create(TextBoxLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(150, 150, 180)
                        }):Play()
                        if enter and TextBox.Text ~= "" then
                            options.callback(TextBox.Text)
                        end
                    end)

                    Resize(30)
                end

                function elements:Colorpicker(options)
                    if not options.text or not options.color or not options.callback then
                        Notify("Colorpicker", "Missing arguments!")
                        return
                    end

                    local hue, sat, val = Color3.toHSV(options.color)
                    local Colorpicker = Instance.new("Frame")
                    Colorpicker.Name = "Colorpicker"
                    Colorpicker.Parent = SectionFrame
                    Colorpicker.BackgroundTransparency = 1
                    Colorpicker.Size = UDim2.new(0.95, 0, 0, 25)
                    Colorpicker.ZIndex = 2

                    local ColorpickerLabel = Instance.new("TextLabel")
                    ColorpickerLabel.Name = "ColorpickerLabel"
                    ColorpickerLabel.Parent = Colorpicker
                    ColorpickerLabel.BackgroundTransparency = 1
                    ColorpickerLabel.AnchorPoint = Vector2.new(0, 0.5)
                    ColorpickerLabel.Position = UDim2.new(0, 0, 0.5, 0)
                    ColorpickerLabel.Size = UDim2.new(0.7, 0, 0, 25)
                    ColorpickerLabel.Font = Enum.Font.SourceSansPro
                    ColorpickerLabel.Text = options.text
                    ColorpickerLabel.TextColor3 = Color3.fromRGB(150, 150, 180)
                    ColorpickerLabel.TextSize = 14
                    ColorpickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = ColorpickerLabel, entered = Colorpicker})

                    local ColorpickerButton = Instance.new("ImageButton")
                    ColorpickerButton.Name = "ColorpickerButton"
                    ColorpickerButton.Parent = Colorpicker
                    ColorpickerButton.BackgroundColor3 = options.color
                    ColorpickerButton.AnchorPoint = Vector2.new(0, 0.5)
                    ColorpickerButton.Position = UDim2.new(0.8, 0, 0.5, 0)
                    ColorpickerButton.Size = UDim2.new(0, 20, 0, 20)
                    ColorpickerButton.Image = ""

                    local ColorpickerButtonCorner = Instance.new("UICorner")
                    ColorpickerButtonCorner.CornerRadius = UDim.new(0, 4)
                    ColorpickerButtonCorner.Parent = ColorpickerButton

                    local ColorpickerFrame = Instance.new("Frame")
                    ColorpickerFrame.Name = "ColorpickerFrame"
                    ColorpickerFrame.Parent = Colorpicker
                    ColorpickerFrame.Visible = false
                    ColorpickerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
                    ColorpickerFrame.Position = UDim2.new(1.1, 0, 0.5, 0)
                    ColorpickerFrame.Size = UDim2.new(0, 260, 0, 230)
                    ColorpickerFrame.ZIndex = 15
                    Dragify(ColorpickerFrame)

                    local ColorpickerFrameCorner = Instance.new("UICorner")
                    ColorpickerFrameCorner.CornerRadius = UDim.new(0, 6)
                    ColorpickerFrameCorner.Parent = ColorpickerFrame

                    local RGB = Instance.new("ImageButton")
                    RGB.Name = "RGB"
                    RGB.Parent = ColorpickerFrame
                    RGB.BackgroundTransparency = 1
                    RGB.Position = UDim2.new(0.05, 0, 0.05, 0)
                    RGB.Size = UDim2.new(0, 180, 0, 160)
                    RGB.Image = "rbxassetid://6523286724"
                    RGB.ZIndex = 16

                    local RGBCircle = Instance.new("ImageLabel")
                    RGBCircle.Name = "RGBCircle"
                    RGBCircle.Parent = RGB
                    RGBCircle.BackgroundTransparency = 1
                    RGBCircle.Size = UDim2.new(0, 14, 0, 14)
                    RGBCircle.Image = "rbxassetid://3926309567"
                    RGBCircle.ImageRectOffset = Vector2.new(628, 420)
                    RGBCircle.ImageRectSize = Vector2.new(48, 48)
                    RGBCircle.ZIndex = 16

                    local Darkness = Instance.new("ImageButton")
                    Darkness.Name = "Darkness"
                    Darkness.Parent = ColorpickerFrame
                    Darkness.BackgroundTransparency = 1
                    Darkness.Position = UDim2.new(0.75, 0, 0.05, 0)
                    Darkness.Size = UDim2.new(0, 35, 0, 160)
                    Darkness.Image = "rbxassetid://156579757"
                    Darkness.ZIndex = 16

                    local DarknessCircle = Instance.new("Frame")
                    DarknessCircle.Name = "DarknessCircle"
                    DarknessCircle.Parent = Darkness
                    DarknessCircle.BackgroundColor3 = options.color
                    DarknessCircle.Position = UDim2.new(0, 0, 0, 0)
                    DarknessCircle.Size = UDim2.new(1, 0, 0, 5)
                    DarknessCircle.ZIndex = 16

                    local ColorHex = Instance.new("TextLabel")
                    ColorHex.Name = "ColorHex"
                    ColorHex.Parent = ColorpickerFrame
                    ColorHex.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    ColorHex.Position = UDim2.new(0.05, 0, 0.8, 0)
                    ColorHex.Size = UDim2.new(0, 100, 0, 25)
                    ColorHex.Font = Enum.Font.SourceSansPro
                    ColorHex.Text = "#FFFFFF"
                    ColorHex.TextColor3 = Color3.fromRGB(255, 255, 255)
                    ColorHex.TextSize = 14
                    ColorHex.ZIndex = 16

                    local ColorHexCorner = Instance.new("UICorner")
                    ColorHexCorner.CornerRadius = UDim.new(0, 4)
                    ColorHexCorner.Parent = ColorHex

                    local Copy = Instance.new("TextButton")
                    Copy.Parent = ColorpickerFrame
                    Copy.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    Copy.Position = UDim2.new(0.45, 0, 0.8, 0)
                    Copy.Size = UDim2.new(0, 80, 0, 25)
                    Copy.AutoButtonColor = false
                    Copy.Font = Enum.Font.SourceSansPro
                    Copy.Text = "Copy"
                    Copy.TextColor3 = Color3.fromRGB(255, 255, 255)
                    Copy.TextSize = 14
                    Copy.ZIndex = 16

                    local CopyCorner = Instance.new("UICorner")
                    CopyCorner.CornerRadius = UDim.new(0, 4)
                    CopyCorner.Parent = Copy

                    local vis = false

                    ColorpickerButton.MouseButton1Click:Connect(function()
                        vis = not vis
                        ColorpickerFrame.Visible = vis
                        TweenService:Create(ColorpickerLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                            TextColor3 = vis and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(150, 150, 180)
                        }):Play()
                    end)

                    Copy.MouseButton1Click:Connect(function()
                        if setclipboard then
                            setclipboard(ColorHex.Text)
                            Notify("Colorpicker", "Copied: " .. ColorHex.Text)
                        else
                            print(ColorHex.Text)
                            Notify("Colorpicker", "Printed: " .. ColorHex.Text)
                        end
                    end)

                    local ceil, clamp, atan2, pi = math.ceil, math.clamp, math.atan2, math.pi
                    local tostr, sub = tostring, string.sub
                    local fromHSV = Color3.fromHSV
                    local v2, udim2 = Vector2.new, UDim2.new

                    local color = {hue, sat, val}

                    local function to_hex(color)
                        return string.format("#%02X%02X%02X", color.R * 255, color.G * 255, color.B * 255)
                    end

                    local function update()
                        local c = fromHSV(color[1], color[2], color[3])
                        ColorHex.Text = to_hex(c)
                        ColorpickerButton.BackgroundColor3 = c
                    end

                    local function UpdateSlide(iX, iY)
                        local y = iY - Darkness.AbsolutePosition.Y
                        local maxY = Darkness.AbsoluteSize.Y
                        y = clamp(y, 0, maxY)
                        y = y / maxY
                        color[3] = 1 - y
                        local realcolor = fromHSV(color[1], color[2], color[3])
                        DarknessCircle.BackgroundColor3 = realcolor
                        DarknessCircle.Position = UDim2.new(0, 0, y, -2.5)
                        ColorpickerButton.BackgroundColor3 = realcolor
                        options.callback(realcolor)
                        update()
                    end

                    local function UpdateRing(iX, iY)
                        local x, y = iX - RGB.AbsolutePosition.X, iY - RGB.AbsolutePosition.Y
                        local maxX, maxY = RGB.AbsoluteSize.X, RGB.AbsoluteSize.Y
                        x = clamp(x, 0, maxX)
                        y = clamp(y, 0, maxY)
                        x = x / maxX
                        y = y / maxY
                        color[1] = 1 - x
                        color[2] = 1 - y
                        local realcolor = fromHSV(color[1], color[2], color[3])
                        Darkness.BackgroundColor3 = realcolor
                        DarknessCircle.BackgroundColor3 = realcolor
                        RGBCircle.Position = UDim2.new(x, -7, y, -7)
                        ColorpickerButton.BackgroundColor3 = realcolor
                        options.callback(realcolor)
                        update()
                    end

                    local WheelDown = false
                    local SlideDown = false

                    RGB.MouseButton1Down:Connect(function()
                        WheelDown = true
                        UpdateRing(themouse.X, themouse.Y)
                    end)

                    Darkness.MouseButton1Down:Connect(function()
                        SlideDown = true
                        UpdateSlide(themouse.X, themouse.Y)
                    end)

                    InputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            WheelDown = false
                            SlideDown = false
                        end
                    end)

                    InputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            if WheelDown then
                                UpdateRing(themouse.X, themouse.Y)
                            end
                            if SlideDown then
                                UpdateSlide(themouse.X, themouse.Y)
                            end
                        end
                    end)

                    update()

                    Resize(30)
                end

                function elements:Keybind(options)
                    if not options.text or not options.default or not options.callback then
                        Notify("Keybind", "Missing arguments!")
                        return
                    end

                    local blacklisted = {
                        Return = true,
                        Space = true,
                        Tab = true,
                        W = true,
                        A = true,
                        S = true,
                        D = true,
                        I = true,
                        O = true,
                        Unknown = true
                    }

                    local short = {
                        RightControl = "RCtrl",
                        LeftControl = "LCtrl",
                        LeftShift = "LShift",
                        RightShift = "RShift",
                        MouseButton1 = "M1",
                        MouseButton2 = "M2",
                        LeftAlt = "LAlt",
                        RightAlt = "RAlt"
                    }

                    local oldKey = options.default.Name
                    local Keybind = Instance.new("Frame")
                    Keybind.Name = "Keybind"
                    Keybind.Parent = SectionFrame
                    Keybind.BackgroundTransparency = 1
                    Keybind.Size = UDim2.new(0.95, 0, 0, 25)
                    Keybind.ZIndex = 2

                    local KeybindButton = Instance.new("TextButton")
                    KeybindButton.Name = "KeybindButton"
                    KeybindButton.Parent = Keybind
                    KeybindButton.BackgroundTransparency = 1
                    KeybindButton.AnchorPoint = Vector2.new(0, 0.5)
                    KeybindButton.Position = UDim2.new(0, 0, 0.5, 0)
                    KeybindButton.Size = UDim2.new(0.7, 0, 0, 25)
                    KeybindButton.AutoButtonColor = false
                    KeybindButton.Font = Enum.Font.SourceSansPro
                    KeybindButton.Text = options.text
                    KeybindButton.TextColor3 = Color3.fromRGB(150, 150, 180)
                    KeybindButton.TextSize = 14
                    KeybindButton.TextXAlignment = Enum.TextXAlignment.Left
                    buttonEffect({frame = KeybindButton, entered = Keybind})

                    local KeybindLabel = Instance.new("TextLabel")
                    KeybindLabel.Name = "KeybindLabel"
                    KeybindLabel.Parent = Keybind
                    KeybindLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
                    KeybindLabel.AnchorPoint = Vector2.new(0, 0.5)
                    KeybindLabel.Position = UDim2.new(0.7, 0, 0.5, 0)
                    KeybindLabel.Size = UDim2.new(0.3, 0, 0, 20)
                    KeybindLabel.Font = Enum.Font.SourceSansPro
                    KeybindLabel.Text = short[oldKey] or oldKey
                    KeybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    KeybindLabel.TextSize = 14
                    KeybindLabel.TextXAlignment = Enum.TextXAlignment.Center

                    local KeybindLabelCorner = Instance.new("UICorner")
                    KeybindLabelCorner.CornerRadius = UDim.new(0, 4)
                    KeybindLabelCorner.Parent = KeybindLabel

                    KeybindButton.MouseButton1Click:Connect(function()
                        KeybindLabel.Text = "..."
                        TweenService:Create(KeybindButton, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                        TweenService:Create(KeybindLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                        local input = InputService.InputBegan:Wait()
                        local keyName = input.KeyCode.Name
                        if not blacklisted[keyName] then
                            oldKey = keyName
                            KeybindLabel.Text = short[keyName] or keyName
                            options.callback(keyName)
                        else
                            KeybindLabel.Text = short[oldKey] or oldKey
                        end
                        TweenService:Create(KeybindButton, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(150, 150, 180)
                        }):Play()
                        TweenService:Create(KeybindLabel, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                    end)

                    InputService.InputBegan:Connect(function(input, focused)
                        if not focused and input.KeyCode.Name == oldKey then
                            options.callback(oldKey)
                        end
                    end)

                    Resize(30)
                end

                return elements
            end

            return sections
        end

        return tabs
    end

    return tabsections
end

return Library
