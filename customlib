local Library = {}

local NeverloseVersion = "v2.0.0"

local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Clean up existing UI
for _, v in next, game.CoreGui:GetChildren() do
    if v:IsA("ScreenGui") and v.Name == "Neverlose" then
        v:Destroy()
    end
end

local mouse = game.Players.LocalPlayer:GetMouse()

-- Notification function with redesigned visuals
local function Notify(title, text)
    local notification = Instance.new("ScreenGui")
    notification.Parent = game.CoreGui
    notification.Name = "Notification"

    local frame = Instance.new("Frame")
    frame.Parent = notification
    frame.BackgroundColor3 = Color3.fromRGB(20, 25, 35)
    frame.BorderSizePixel = 0
    frame.Position = UDim2.new(1, -300, 1, -100)
    frame.Size = UDim2.new(0, 280, 0, 80)
    frame.BackgroundTransparency = 0.1

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = frame
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 15, 0, 10)
    titleLabel.Size = UDim2.new(0, 250, 0, 20)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(200, 210, 220)
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = frame
    textLabel.BackgroundTransparency = 1
    textLabel.Position = UDim2.new(0, 15, 0, 35)
    textLabel.Size = UDim2.new(0, 250, 0, 35)
    textLabel.Font = Enum.Font.Gotham
    textLabel.Text = text
    textLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
    textLabel.TextSize = 14
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextWrapped = true

    -- Animation
    frame.Position = UDim2.new(1, 0, 1, -100)
    TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -300, 1, -100),
        BackgroundTransparency = 0
    }):Play()

    wait(5)
    TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
        Position = UDim2.new(1, 0, 1, -100),
        BackgroundTransparency = 0.8
    }):Play()
    wait(0.5)
    notification:Destroy()
end

-- Dragging function with smoother animations
local function Dragify(frame, parent)
    parent = parent or frame
    local dragging = false
    local dragInput, mousePos, framePos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    InputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            TweenService:Create(parent, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {
                Position = UDim2.new(
                    framePos.X.Scale, framePos.X.Offset + delta.X,
                    framePos.Y.Scale, framePos.Y.Offset + delta.Y
                )
            }):Play()
        end
    end)
end

-- Rounding function
local function round(num, bracket)
    bracket = bracket or 1
    local a = math.floor(num / bracket + (math.sign(num) * 0.5)) * bracket
    if a < 0 then
        a = a + bracket
    end
    return a
end

-- Button hover effect
local function buttonEffect(options)
    options.entered.MouseEnter:Connect(function()
        if options.frame.TextColor3 ~= Color3.fromRGB(220, 230, 240) then
            TweenService:Create(options.frame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                TextColor3 = Color3.fromRGB(220, 230, 240),
                BackgroundTransparency = 0.9
            }):Play()
        end
    end)
    options.entered.MouseLeave:Connect(function()
        if options.frame.TextColor3 ~= Color3.fromRGB(120, 130, 140) then
            TweenService:Create(options.frame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                TextColor3 = Color3.fromRGB(120, 130, 140),
                BackgroundTransparency = 1
            }):Play()
        end
    end)
end

-- Button click animation
local function clickEffect(options)
    options.button.MouseButton1Click:Connect(function()
        local originalSize = options.button.TextSize
        local newSize = originalSize - tonumber(options.amount)
        TweenService:Create(options.button, TweenInfo.new(0.15, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            TextSize = newSize
        }):Play()
        wait(0.1)
        TweenService:Create(options.button, TweenInfo.new(0.1, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            TextSize = originalSize
        }):Play()
    end)
end

function Library:Toggle(value)
    local gui = game.CoreGui:FindFirstChild("Neverlose")
    if not gui then return end
    enabled = (type(value) == "boolean" and value) or gui.Enabled
    gui.Enabled = not enabled
end

function Library:Window(options)
    options.text = options.text or "NEVERLOSE"

    -- Main GUI setup
    local SG = Instance.new("ScreenGui")
    SG.Parent = game.CoreGui
    SG.Name = "Neverlose"
    SG.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local Body = Instance.new("Frame")
    Body.Name = "Body"
    Body.Parent = SG
    Body.AnchorPoint = Vector2.new(0.5, 0.5)
    Body.BackgroundColor3 = Color3.fromRGB(15, 20, 30)
    Body.BorderSizePixel = 0
    Body.Position = UDim2.new(0.5, 0, 0.5, 0)
    Body.Size = UDim2.new(0, 700, 0, 550)
    Body.BackgroundTransparency = 0.05
    Dragify(Body)

    local bodyGradient = Instance.new("UIGradient")
    bodyGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 20, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 35, 50))
    })
    bodyGradient.Rotation = 45
    bodyGradient.Parent = Body

    local bodyCorner = Instance.new("UICorner")
    bodyCorner.CornerRadius = UDim.new(0, 12)
    bodyCorner.Parent = Body

    local SideBar = Instance.new("Frame")
    SideBar.Name = "SideBar"
    SideBar.Parent = Body
    SideBar.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
    SideBar.BorderSizePixel = 0
    SideBar.Size = UDim2.new(0, 200, 1, 0)

    local sidebarCorner = Instance.new("UICorner")
    sidebarCorner.CornerRadius = UDim.new(0, 12)
    sidebarCorner.Parent = SideBar

    local sidebarGradient = Instance.new("UIGradient")
    sidebarGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 35, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 45, 60))
    })
    sidebarGradient.Rotation = 90
    sidebarGradient.Parent = SideBar

    local sbLine = Instance.new("Frame")
    sbLine.Name = "sbLine"
    sbLine.Parent = SideBar
    sbLine.BackgroundColor3 = Color3.fromRGB(10, 15, 25)
    sbLine.BorderSizePixel = 0
    sbLine.Position = UDim2.new(1, -3, 0, 0)
    sbLine.Size = UDim2.new(0, 3, 1, 0)

    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = Body
    TopBar.BackgroundColor3 = Color3.fromRGB(15, 20, 30)
    TopBar.BackgroundTransparency = 0.8
    TopBar.Position = UDim2.new(0.286, 0, 0, 0)
    TopBar.Size = UDim2.new(0, 500, 0, 60)

    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UDim.new(0, 8)
    topBarCorner.Parent = TopBar

    local tbLine = Instance.new("Frame")
    tbLine.Name = "tbLine"
    tbLine.Parent = TopBar
    tbLine.BackgroundColor3 = Color3.fromRGB(10, 15, 25)
    tbLine.BorderSizePixel = 0
    tbLine.Position = UDim2.new(0, 0, 1, -3)
    tbLine.Size = UDim2.new(1, 0, 0, 3)

    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = SideBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.05, 0, 0.02, 0)
    Title.Size = UDim2.new(0, 180, 0, 40)
    Title.Font = Enum.Font.GothamBold
    Title.Text = options.text
    Title.TextColor3 = Color3.fromRGB(200, 210, 220)
    Title.TextSize = 24
    Title.TextWrapped = true
    Title.TextXAlignment = Enum.TextXAlignment.Left

    local versionLabel = Instance.new("TextLabel")
    versionLabel.Parent = SideBar
    versionLabel.BackgroundTransparency = 1
    versionLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
    versionLabel.Size = UDim2.new(0, 180, 0, 20)
    versionLabel.Font = Enum.Font.Gotham
    versionLabel.Text = NeverloseVersion
    versionLabel.TextColor3 = Color3.fromRGB(100, 110, 120)
    versionLabel.TextSize = 14
    versionLabel.TextXAlignment = Enum.TextXAlignment.Left

    local allPages = Instance.new("Frame")
    allPages.Name = "allPages"
    allPages.Parent = Body
    allPages.BackgroundTransparency = 1
    allPages.Position = UDim2.new(0.286, 0, 0.109, 0)
    allPages.Size = UDim2.new(0, 500, 0, 490)

    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "tabContainer"
    tabContainer.Parent = SideBar
    tabContainer.BackgroundTransparency = 1
    tabContainer.Position = UDim2.new(0, 0, 0.15, 0)
    tabContainer.Size = UDim2.new(1, 0, 0, 400)

    local tabsections = {}

    function tabsections:TabSection(options)
        options.text = options.text or "Tab Section"

        local tabLayout = Instance.new("UIListLayout")
        tabLayout.Name = "tabLayout"
        tabLayout.Parent = tabContainer
        tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabLayout.Padding = UDim.new(0, 8)

        local tabSection = Instance.new("Frame")
        tabSection.Name = "tabSection"
        tabSection.Parent = tabContainer
        tabSection.BackgroundTransparency = 1
        tabSection.Size = UDim2.new(1, 0, 0, 30)

        local tabSectionLabel = Instance.new("TextLabel")
        tabSectionLabel.Name = "tabSectionLabel"
        tabSectionLabel.Parent = tabSection
        tabSectionLabel.BackgroundTransparency = 1
        tabSectionLabel.Size = UDim2.new(1, 0, 0, 30)
        tabSectionLabel.Font = Enum.Font.GothamSemibold
        tabSectionLabel.Text = options.text:upper()
        tabSectionLabel.TextColor3 = Color3.fromRGB(80, 100, 120)
        tabSectionLabel.TextSize = 16
        tabSectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        tabSectionLabel.TextTransparency = 0.3

        local tabSectionLayout = Instance.new("UIListLayout")
        tabSectionLayout.Name = "tabSectionLayout"
        tabSectionLayout.Parent = tabSection
        tabSectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        tabSectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabSectionLayout.Padding = UDim.new(0, 8)

        local function ResizeTS(num)
            tabSection.Size = tabSection.Size + UDim2.new(0, 0, 0, num)
        end

        local tabs = {}

        function tabs:Tab(options)
            options.text = options.text or "New Tab"
            options.icon = options.icon or "rbxassetid://7999345313"

            local tabButton = Instance.new("TextButton")
            tabButton.Name = "tabButton"
            tabButton.Parent = tabSection
            tabButton.BackgroundColor3 = Color3.fromRGB(35, 45, 60)
            tabButton.BorderSizePixel = 0
            tabButton.Size = UDim2.new(0, 180, 0, 40)
            tabButton.AutoButtonColor = false
            tabButton.Font = Enum.Font.GothamSemibold
            tabButton.Text = options.text
            tabButton.TextColor3 = Color3.fromRGB(150, 160, 170)
            tabButton.TextSize = 14
            tabButton.BackgroundTransparency = 0.8
            tabButton.TextXAlignment = Enum.TextXAlignment.Left

            local tabButtonCorner = Instance.new("UICorner")
            tabButtonCorner.CornerRadius = UDim.new(0, 8)
            tabButtonCorner.Parent = tabButton

            local tabIcon = Instance.new("ImageLabel")
            tabIcon.Name = "tabIcon"
            tabIcon.Parent = tabButton
            tabIcon.BackgroundTransparency = 1
            tabIcon.Position = UDim2.new(0.05, 0, 0.25, 0)
            tabIcon.Size = UDim2.new(0, 20, 0, 20)
            tabIcon.Image = options.icon
            tabIcon.ImageColor3 = Color3.fromRGB(50, 150, 200)

            local newPage = Instance.new("ScrollingFrame")
            newPage.Name = "newPage"
            newPage.Parent = allPages
            newPage.Visible = false
            newPage.BackgroundTransparency = 1
            newPage.BorderSizePixel = 0
            newPage.Position = UDim2.new(0, 0, 0, 0)
            newPage.Size = UDim2.new(1, 0, 1, 0)
            newPage.ScrollBarThickness = 4
            newPage.ScrollBarImageColor3 = Color3.fromRGB(50, 60, 70)
            newPage.CanvasSize = UDim2.new(0, 0, 0, 0)

            local pageLayout = Instance.new("UIGridLayout")
            pageLayout.Name = "pageLayout"
            pageLayout.Parent = newPage
            pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
            pageLayout.CellPadding = UDim2.new(0, 15, 0, 15)
            pageLayout.CellSize = UDim2.new(0, 235, 0, 150)
            pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                newPage.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y)
            end)

            tabButton.MouseButton1Click:Connect(function()
                for _, v in next, allPages:GetChildren() do
                    v.Visible = false
                end
                newPage.Visible = true

                for _, v in next, SideBar:GetDescendants() do
                    if v:IsA("TextButton") then
                        TweenService:Create(v, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            BackgroundTransparency = 0.8,
                            TextColor3 = Color3.fromRGB(150, 160, 170)
                        }):Play()
                    end
                end

                TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 0.2,
                    TextColor3 = Color3.fromRGB(200, 210, 220)
                }):Play()
            end)

            -- Hover effect for tab button
            tabButton.MouseEnter:Connect(function()
                TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 0.4
                }):Play()
            end)
            tabButton.MouseLeave:Connect(function()
                if newPage.Visible then return end
                TweenService:Create(tabButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 0.8
                }):Play()
            end)

            ResizeTS(48)

            local sections = {}

            function sections:Section(options)
                options.text = options.text or "Section"

                local sectionFrame = Instance.new("Frame")
                sectionFrame.Name = "sectionFrame"
                sectionFrame.Parent = newPage
                sectionFrame.BackgroundColor3 = Color3.fromRGB(20, 30, 45)
                sectionFrame.BorderSizePixel = 0
                sectionFrame.Size = UDim2.new(0, 235, 0, 150)

                local sectionCorner = Instance.new("UICorner")
                sectionCorner.CornerRadius = UDim.new(0, 8)
                sectionCorner.Parent = sectionFrame

                local sectionGradient = Instance.new("UIGradient")
                sectionGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 30, 45)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 40, 55))
                })
                sectionGradient.Rotation = 45
                sectionGradient.Parent = sectionFrame

                local sectionLabel = Instance.new("TextLabel")
                sectionLabel.Name = "sectionLabel"
                sectionLabel.Parent = sectionFrame
                sectionLabel.BackgroundTransparency = 1
                sectionLabel.Position = UDim2.new(0, 10, 0, 10)
                sectionLabel.Size = UDim2.new(0, 215, 0, 30)
                sectionLabel.Font = Enum.Font.GothamBold
                sectionLabel.Text = options.text
                sectionLabel.TextColor3 = Color3.fromRGB(200, 210, 220)
                sectionLabel.TextSize = 16
                sectionLabel.TextXAlignment = Enum.TextXAlignment.Left

                local sectionLayout = Instance.new("UIListLayout")
                sectionLayout.Name = "sectionLayout"
                sectionLayout.Parent = sectionFrame
                sectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
                sectionLayout.Padding = UDim.new(0, 8)

                local sLine = Instance.new("Frame")
                sLine.Name = "sLine"
                sLine.Parent = sectionFrame
                sLine.BackgroundColor3 = Color3.fromRGB(10, 20, 30)
                sLine.BorderSizePixel = 0
                sLine.Position = UDim2.new(0.05, 0, 0.25, 0)
                sLine.Size = UDim2.new(0.9, 0, 0, 2)

                local sectionSizeConstraint = Instance.new("UISizeConstraint")
                sectionSizeConstraint.Name = "sectionSizeConstraint"
                sectionSizeConstraint.Parent = sectionFrame
                sectionSizeConstraint.MinSize = Vector2.new(235, 50)

                local function Resize(num)
                    sectionSizeConstraint.MinSize = sectionSizeConstraint.MinSize + Vector2.new(0, num)
                end

                local elements = {}

                function elements:Button(options)
                    if not options.text or not options.callback then
                        Notify("Button Error", "Missing arguments!")
                        return
                    end

                    local TextButton = Instance.new("TextButton")
                    TextButton.Parent = sectionFrame
                    TextButton.BackgroundColor3 = Color3.fromRGB(35, 45, 60)
                    TextButton.BorderSizePixel = 0
                    TextButton.Size = UDim2.new(0, 215, 0, 35)
                    TextButton.AutoButtonColor = false
                    TextButton.Font = Enum.Font.GothamSemibold
                    TextButton.Text = options.text
                    TextButton.TextColor3 = Color3.fromRGB(150, 160, 170)
                    TextButton.TextSize = 14
                    TextButton.BackgroundTransparency = 0.2

                    local buttonCorner = Instance.new("UICorner")
                    buttonCorner.CornerRadius = UDim.new(0, 6)
                    buttonCorner.Parent = TextButton

                    buttonEffect({frame = TextButton, entered = TextButton})
                    clickEffect({button = TextButton, amount = 3})

                    TextButton.MouseButton1Click:Connect(function()
                        options.callback()
                    end)

                    Resize(40)
                end

                function elements:Toggle(options)
                    if not options.text or not options.callback then
                        Notify("Toggle Error", "Missing arguments!")
                        return
                    end

                    local toggleFrame = Instance.new("Frame")
                    toggleFrame.Name = "toggleFrame"
                    toggleFrame.Parent = sectionFrame
                    toggleFrame.BackgroundTransparency = 1
                    toggleFrame.Size = UDim2.new(0, 215, 0, 35)

                    local toggleLabel = Instance.new("TextLabel")
                    toggleLabel.Name = "toggleLabel"
                    toggleLabel.Parent = toggleFrame
                    toggleLabel.BackgroundTransparency = 1
                    toggleLabel.Size = UDim2.new(0, 150, 0, 35)
                    toggleLabel.Font = Enum.Font.Gotham
                    toggleLabel.Text = options.text
                    toggleLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
                    toggleLabel.TextSize = 14
                    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left

                    local toggleButton = Instance.new("TextButton")
                    toggleButton.Name = "toggleButton"
                    toggleButton.Parent = toggleFrame
                    toggleButton.BackgroundColor3 = Color3.fromRGB(35, 45, 60)
                    toggleButton.BorderSizePixel = 0
                    toggleButton.Position = UDim2.new(0.75, 0, 0.25, 0)
                    toggleButton.Size = UDim2.new(0, 50, 0, 20)
                    toggleButton.AutoButtonColor = false
                    toggleButton.Font = Enum.Font.SourceSans
                    toggleButton.Text = ""
                    toggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                    toggleButton.TextSize = 14

                    local togFrameCorner = Instance.new("UICorner")
                    togFrameCorner.CornerRadius = UDim.new(0, 20)
                    togFrameCorner.Parent = toggleButton

                    local toggleKnob = Instance.new("Frame")
                    toggleKnob.Name = "toggleKnob"
                    toggleKnob.Parent = toggleButton
                    toggleKnob.BackgroundColor3 = Color3.fromRGB(100, 110, 120)
                    toggleKnob.Size = UDim2.new(0, 16, 0, 16)
                    toggleKnob.Position = UDim2.new(0.1, 0, 0.1, 0)

                    local togKnobCorner = Instance.new("UICorner")
                    togKnobCorner.CornerRadius = UDim.new(0, 20)
                    togKnobCorner.Parent = toggleKnob

                    local State = options.state or false

                    if State then
                        toggleKnob.Position = UDim2.new(0.5, 0, 0.1, 0)
                        toggleLabel.TextColor3 = Color3.fromRGB(200, 210, 220)
                        toggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 200)
                    end

                    local function PerformToggle()
                        State = not State
                        options.callback(State)
                        TweenService:Create(toggleKnob, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            Position = State and UDim2.new(0.5, 0, 0.1, 0) or UDim2.new(0.1, 0, 0.1, 0)
                        }):Play()
                        TweenService:Create(toggleLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = State and Color3.fromRGB(200, 210, 220) or Color3.fromRGB(150, 160, 170)
                        }):Play()
                        TweenService:Create(toggleButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            BackgroundColor3 = State and Color3.fromRGB(50, 150, 200) or Color3.fromRGB(35, 45, 60)
                        }):Play()
                    end

                    toggleButton.MouseButton1Click:Connect(PerformToggle)
                    buttonEffect({frame = toggleLabel, entered = toggleFrame})

                    Resize(40)
                end

                function elements:Slider(options)
                    if not options.text or not options.min or not options.max or not options.callback then
                        Notify("Slider Error", "Missing arguments!")
                        return
                    end

                    local Slider = Instance.new("Frame")
                    Slider.Name = "Slider"
                    Slider.Parent = sectionFrame
                    Slider.BackgroundTransparency = 1
                    Slider.Size = UDim2.new(0, 215, 0, 50)

                    local sliderLabel = Instance.new("TextLabel")
                    sliderLabel.Name = "sliderLabel"
                    sliderLabel.Parent = Slider
                    sliderLabel.BackgroundTransparency = 1
                    sliderLabel.Size = UDim2.new(0, 100, 0, 20)
                    sliderLabel.Font = Enum.Font.Gotham
                    sliderLabel.Text = options.text
                    sliderLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
                    sliderLabel.TextSize = 14
                    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left

                    local sliderFrame = Instance.new("Frame")
                    sliderFrame.Name = "sliderFrame"
                    sliderFrame.Parent = Slider
                    sliderFrame.BackgroundColor3 = Color3.fromRGB(35, 45, 60)
                    sliderFrame.BorderSizePixel = 0
                    sliderFrame.Position = UDim2.new(0, 0, 0.6, 0)
                    sliderFrame.Size = UDim2.new(0, 215, 0, 8)

                    local sliderFrameCorner = Instance.new("UICorner")
                    sliderFrameCorner.CornerRadius = UDim.new(0, 4)
                    sliderFrameCorner.Parent = sliderFrame

                    local sliderFill = Instance.new("Frame")
                    sliderFill.Name = "sliderFill"
                    sliderFill.Parent = sliderFrame
                    sliderFill.BackgroundColor3 = Color3.fromRGB(50, 150, 200)
                    sliderFill.BorderSizePixel = 0
                    sliderFill.Size = UDim2.new(0, 0, 1, 0)

                    local sliderFillCorner = Instance.new("UICorner")
                    sliderFillCorner.CornerRadius = UDim.new(0, 4)
                    sliderFillCorner.Parent = sliderFill

                    local sliderBall = Instance.new("Frame")
                    sliderBall.Name = "sliderBall"
                    sliderBall.Parent = sliderFrame
                    sliderBall.BackgroundColor3 = Color3.fromRGB(200, 210, 220)
                    sliderBall.BorderSizePixel = 0
                    sliderBall.Position = UDim2.new(0, 0, 0.5, -10)
                    sliderBall.Size = UDim2.new(0, 20, 0, 20)
                    sliderBall.AnchorPoint = Vector2.new(0, 0.5)

                    local sliderBallCorner = Instance.new("UICorner")
                    sliderBallCorner.CornerRadius = UDim.new(0, 20)
                    sliderBallCorner.Parent = sliderBall

                    local sliderTextBox = Instance.new("TextBox")
                    sliderTextBox.Name = "sliderTextBox"
                    sliderTextBox.Parent = Slider
                    sliderTextBox.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    sliderTextBox.BorderSizePixel = 0
                    sliderTextBox.Position = UDim2.new(0.8, 0, 0, 0)
                    sliderTextBox.Size = UDim2.new(0, 40, 0, 20)
                    sliderTextBox.Font = Enum.Font.Gotham
                    sliderTextBox.Text = tostring(options.min)
                    sliderTextBox.TextColor3 = Color3.fromRGB(200, 210, 220)
                    sliderTextBox.TextSize = 12
                    sliderTextBox.TextWrapped = true

                    local sliderTextBoxCorner = Instance.new("UICorner")
                    sliderTextBoxCorner.CornerRadius = UDim.new(0, 4)
                    sliderTextBoxCorner.Parent = sliderTextBox

                    local Value = options.min
                    local Held = false
                    local percentage = 0
                    local step = 0.01

                    local function snap(number, factor)
                        if factor == 0 then
                            return number
                        else
                            return math.floor(number / factor + 0.5) * factor
                        end
                    end

                    InputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = false
                        end
                    end)

                    sliderFrame.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = true
                        end
                    end)

                    sliderBall.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Held = true
                        end
                    end)

                    RunService.RenderStepped:Connect(function()
                        if Held then
                            local MousePos = InputService:GetMouseLocation().X
                            local FrameSize = sliderFrame.AbsoluteSize.X
                            local FramePos = sliderFrame.AbsolutePosition.X
                            local pos = snap((MousePos - FramePos) / FrameSize, step)
                            percentage = math.clamp(pos, 0, 1)

                            Value = (((options.max - options.min) / 1) * percentage) + options.min
                            Value = round(Value, options.float or 1)
                            Value = math.clamp(Value, options.min, options.max)
                            sliderTextBox.Text = Value
                            options.callback(Value)
                            sliderBall.Position = UDim2.new(percentage, 0, 0.5, -10)
                            sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        end
                    end)

                    sliderTextBox.Focused:Connect(function()
                        TweenService:Create(sliderLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(200, 210, 220)
                        }):Play()
                    end)

                    sliderTextBox.FocusLost:Connect(function(enter)
                        TweenService:Create(sliderLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(150, 160, 170)
                        }):Play()
                        if enter and sliderTextBox.Text ~= "" then
                            local val = tonumber(sliderTextBox.Text)
                            if val then
                                val = math.clamp(val, options.min, options.max)
                                sliderTextBox.Text = tostring(val)
                                options.callback(val)
                                percentage = (val - options.min) / (options.max - options.min)
                                sliderBall.Position = UDim2.new(percentage, 0, 0.5, -10)
                                sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                            end
                        end
                    end)

                    buttonEffect({frame = sliderLabel, entered = Slider})
                    Resize(55)
                end

                function elements:Dropdown(options)
                    if not options.text or not options.default or not options.list or not options.callback then
                        Notify("Dropdown Error", "Missing arguments!")
                        return
                    end

                    local DropYSize = 0
                    local Dropped = false

                    local Dropdown = Instance.new("Frame")
                    Dropdown.Name = "Dropdown"
                    Dropdown.Parent = sectionFrame
                    Dropdown.BackgroundTransparency = 1
                    Dropdown.Size = UDim2.new(0, 215, 0, 35)
                    Dropdown.ZIndex = 2

                    local dropdownLabel = Instance.new("TextLabel")
                    dropdownLabel.Name = "dropdownLabel"
                    dropdownLabel.Parent = Dropdown
                    dropdownLabel.BackgroundTransparency = 1
                    dropdownLabel.Size = UDim2.new(0, 150, 0, 35)
                    dropdownLabel.Font = Enum.Font.Gotham
                    dropdownLabel.Text = options.text
                    dropdownLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
                    dropdownLabel.TextSize = 14
                    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left

                    local dropdownButton = Instance.new("TextButton")
                    dropdownButton.Name = "dropdownButton"
                    dropdownButton.Parent = Dropdown
                    dropdownButton.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    dropdownButton.BorderSizePixel = 0
                    dropdownButton.Position = UDim2.new(0.7, 0, 0, 0)
                    dropdownButton.Size = UDim2.new(0, 60, 0, 35)
                    dropdownButton.AutoButtonColor = false
                    dropdownButton.Font = Enum.Font.Gotham
                    dropdownButton.Text = options.default
                    dropdownButton.TextColor3 = Color3.fromRGB(200, 210, 220)
                    dropdownButton.TextSize = 12
                    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
                    dropdownButton.TextWrapped = true

                    local dropdownButtonCorner = Instance.new("UICorner")
                    dropdownButtonCorner.CornerRadius = UDim.new(0, 6)
                    dropdownButtonCorner.Parent = dropdownButton

                    local dropdownArrow = Instance.new("ImageLabel")
                    dropdownArrow.Name = "dropdownArrow"
                    dropdownArrow.Parent = dropdownButton
                    dropdownArrow.BackgroundTransparency = 1
                    dropdownArrow.Position = UDim2.new(0.8, 0, 0.3, 0)
                    dropdownArrow.Size = UDim2.new(0, 10, 0, 10)
                    dropdownArrow.Image = "rbxassetid://8008296380"
                    dropdownArrow.ImageColor3 = Color3.fromRGB(150, 160, 170)

                    local dropdownList = Instance.new("Frame")
                    dropdownList.Name = "dropdownList"
                    dropdownList.Parent = dropdownButton
                    dropdownList.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    dropdownList.Position = UDim2.new(0, 0, 1, 5)
                    dropdownList.Size = UDim2.new(0, 60, 0, 0)
                    dropdownList.ClipsDescendants = true
                    dropdownList.BorderSizePixel = 0
                    dropdownList.ZIndex = 10

                    local dropdownListCorner = Instance.new("UICorner")
                    dropdownListCorner.CornerRadius = UDim.new(0, 6)
                    dropdownListCorner.Parent = dropdownList

                    local dropListLayout = Instance.new("UIListLayout")
                    dropListLayout.Name = "dropListLayout"
                    dropListLayout.Parent = dropdownList
                    dropListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    dropListLayout.Padding = UDim.new(0, 2)

                    dropdownButton.MouseButton1Click:Connect(function()
                        Dropped = not Dropped
                        if Dropped then
                            TweenService:Create(dropdownLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                TextColor3 = Color3.fromRGB(200, 210, 220)
                            }):Play()
                            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                Size = UDim2.new(0, 60, 0, DropYSize)
                            }):Play()
                        else
                            TweenService:Create(dropdownLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                TextColor3 = Color3.fromRGB(150, 160, 170)
                            }):Play()
                            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                Size = UDim2.new(0, 60, 0, 0)
                            }):Play()
                        end
                    end)

                    for _, v in next, options.list do
                        local dropdownBtn = Instance.new("TextButton")
                        dropdownBtn.Name = "dropdownBtn"
                        dropdownBtn.Parent = dropdownList
                        dropdownBtn.BackgroundTransparency = 1
                        dropdownBtn.Size = UDim2.new(1, 0, 0, 20)
                        dropdownBtn.AutoButtonColor = false
                        dropdownBtn.Font = Enum.Font.Gotham
                        dropdownBtn.Text = v
                        dropdownBtn.TextColor3 = Color3.fromRGB(200, 210, 220)
                        dropdownBtn.TextSize = 12
                        dropdownBtn.ZIndex = 15

                        DropYSize = DropYSize + 22

                        dropdownBtn.MouseButton1Click:Connect(function()
                            dropdownButton.Text = v
                            options.callback(v)
                            Dropped = false
                            TweenService:Create(dropdownLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                TextColor3 = Color3.fromRGB(150, 160, 170)
                            }):Play()
                            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                Size = UDim2.new(0, 60, 0, 0)
                            }):Play()
                        end)

                        dropdownBtn.MouseEnter:Connect(function()
                            TweenService:Create(dropdownBtn, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                BackgroundColor3 = Color3.fromRGB(35, 45, 60),
                                BackgroundTransparency = 0.8
                            }):Play()
                        end)
                        dropdownBtn.MouseLeave:Connect(function()
                            TweenService:Create(dropdownBtn, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                BackgroundTransparency = 1
                            }):Play()
                        end)
                    end

                    buttonEffect({frame = dropdownLabel, entered = Dropdown})
                    Resize(40)
                end

                function elements:Textbox(options)
                    if not options.text or not options.value or not options.callback then
                        Notify("Textbox Error", "Missing arguments!")
                        return
                    end

                    local Textbox = Instance.new("Frame")
                    Textbox.Name = "Textbox"
                    Textbox.Parent = sectionFrame
                    Textbox.BackgroundTransparency = 1
                    Textbox.Size = UDim2.new(0, 215, 0, 35)

                    local textBoxLabel = Instance.new("TextLabel")
                    textBoxLabel.Name = "textBoxLabel"
                    textBoxLabel.Parent = Textbox
                    textBoxLabel.BackgroundTransparency = 1
                    textBoxLabel.Size = UDim2.new(0, 100, 0, 35)
                    textBoxLabel.Font = Enum.Font.Gotham
                    textBoxLabel.Text = options.text
                    textBoxLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
                    textBoxLabel.TextSize = 14
                    textBoxLabel.TextXAlignment = Enum.TextXAlignment.Left

                    local textBox = Instance.new("TextBox")
                    textBox.Name = "textBox"
                    textBox.Parent = Textbox
                    textBox.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    textBox.BorderSizePixel = 0
                    textBox.Position = UDim2.new(0.5, 0, 0, 0)
                    textBox.Size = UDim2.new(0, 100, 0, 35)
                    textBox.Font = Enum.Font.Gotham
                    textBox.Text = options.value
                    textBox.TextColor3 = Color3.fromRGB(200, 210, 220)
                    textBox.TextSize = 14
                    textBox.TextWrapped = true

                    local textBoxCorner = Instance.new("UICorner")
                    textBoxCorner.CornerRadius = UDim.new(0, 6)
                    textBoxCorner.Parent = textBox

                    textBox.Focused:Connect(function()
                        TweenService:Create(textBoxLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(200, 210, 220)
                        }):Play()
                    end)

                    textBox.FocusLost:Connect(function(enter)
                        TweenService:Create(textBoxLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(150, 160, 170)
                        }):Play()
                        if enter and textBox.Text ~= "" then
                            options.callback(textBox.Text)
                        end
                    end)

                    buttonEffect({frame = textBoxLabel, entered = Textbox})
                    Resize(40)
                end

                function elements:Colorpicker(options)
                    if not options.text or not options.color or not options.callback then
                        Notify("Colorpicker Error", "Missing arguments!")
                        return
                    end

                    local hue, sat, val = Color3.toHSV(options.color)
                    local vis = false

                    local Colorpicker = Instance.new("Frame")
                    Colorpicker.Name = "Colorpicker"
                    Colorpicker.Parent = sectionFrame
                    Colorpicker.BackgroundTransparency = 1
                    Colorpicker.Size = UDim2.new(0, 215, 0, 35)
                    Colorpicker.ZIndex = 2

                    local colorpickerLabel = Instance.new("TextLabel")
                    colorpickerLabel.Name = "colorpickerLabel"
                    colorpickerLabel.Parent = Colorpicker
                    colorpickerLabel.BackgroundTransparency = 1
                    colorpickerLabel.Size = UDim2.new(0, 150, 0, 35)
                    colorpickerLabel.Font = Enum.Font.Gotham
                    colorpickerLabel.Text = options.text
                    colorpickerLabel.TextColor3 = Color3.fromRGB(150, 160, 170)
                    colorpickerLabel.TextSize = 14
                    colorpickerLabel.TextXAlignment = Enum.TextXAlignment.Left

                    local colorpickerButton = Instance.new("Frame")
                    colorpickerButton.Name = "colorpickerButton"
                    colorpickerButton.Parent = Colorpicker
                    colorpickerButton.BackgroundColor3 = options.color
                    colorpickerButton.BorderSizePixel = 0
                    colorpickerButton.Position = UDim2.new(0.75, 0, 0.2, 0)
                    colorpickerButton.Size = UDim2.new(0, 40, 0, 20)

                    local colorpickerButtonCorner = Instance.new("UICorner")
                    colorpickerButtonCorner.CornerRadius = UDim.new(0, 6)
                    colorpickerButtonCorner.Parent = colorpickerButton

                    local colorpickerFrame = Instance.new("Frame")
                    colorpickerFrame.Name = "colorpickerFrame"
                    colorpickerFrame.Parent = Colorpicker
                    colorpickerFrame.Visible = false
                    colorpickerFrame.BackgroundColor3 = Color3.fromRGB(20, 30, 45)
                    colorpickerFrame.Position = UDim2.new(1.2, 0, 0, 0)
                    colorpickerFrame.Size = UDim2.new(0, 280, 0, 250)
                    colorpickerFrame.ZIndex = 15
                    Dragify(colorpickerFrame)

                    local colorpickerFrameCorner = Instance.new("UICorner")
                    colorpickerFrameCorner.CornerRadius = UDim.new(0, 8)
                    colorpickerFrameCorner.Parent = colorpickerFrame

                    local RGB = Instance.new("ImageButton")
                    RGB.Name = "RGB"
                    RGB.Parent = colorpickerFrame
                    RGB.BackgroundTransparency = 1
                    RGB.Position = UDim2.new(0.05, 0, 0.05, 0)
                    RGB.Size = UDim2.new(0, 200, 0, 180)
                    RGB.AutoButtonColor = false
                    RGB.Image = "rbxassetid://6523286724"
                    RGB.ZIndex = 16

                    local RGBCircle = Instance.new("ImageLabel")
                    RGBCircle.Name = "RGBCircle"
                    RGBCircle.Parent = RGB
                    RGBCircle.BackgroundTransparency = 1
                    RGBCircle.Size = UDim2.new(0, 16, 0, 16)
                    RGBCircle.Image = "rbxassetid://3926309567"
                    RGBCircle.ImageRectOffset = Vector2.new(628, 420)
                    RGBCircle.ImageRectSize = Vector2.new(48, 48)
                    RGBCircle.ZIndex = 16

                    local Darkness = Instance.new("ImageButton")
                    Darkness.Name = "Darkness"
                    Darkness.Parent = colorpickerFrame
                    Darkness.BackgroundTransparency = 1
                    Darkness.Position = UDim2.new(0.8, 0, 0.05, 0)
                    Darkness.Size = UDim2.new(0, 40, 0, 180)
                    Darkness.AutoButtonColor = false
                    Darkness.Image = "rbxassetid://156579757"
                    Darkness.ZIndex = 16

                    local DarknessCircle = Instance.new("Frame")
                    DarknessCircle.Name = "DarknessCircle"
                    DarknessCircle.Parent = Darkness
                    DarknessCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    DarknessCircle.Size = UDim2.new(1, 0, 0, 10)
                    DarknessCircle.ZIndex = 16

                    local colorHex = Instance.new("TextBox")
                    colorHex.Name = "colorHex"
                    colorHex.Parent = colorpickerFrame
                    colorHex.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    colorHex.Position = UDim2.new(0.05, 0, 0.85, 0)
                    colorHex.Size = UDim2.new(0, 120, 0, 30)
                    colorHex.Font = Enum.Font.GothamSemibold
                    colorHex.Text = "#FFFFFF"
                    colorHex.TextColor3 = Color3.fromRGB(200, 210, 220)
                    colorHex.TextSize = 14
                    colorHex.ZIndex = 16

                    local colorHexCorner = Instance.new("UICorner")
                    colorHexCorner.CornerRadius = UDim.new(0, 6)
                    colorHexCorner.Parent = colorHex

                    local Copy = Instance.new("TextButton")
                    Copy.Name = "Copy"
                    Copy.Parent = colorpickerFrame
                    Copy.BackgroundColor3 = Color3.fromRGB(35, 45, 60)
                    Copy.Position = UDim2.new(0.6, 0, 0.85, 0)
                    Copy.Size = UDim2.new(0, 80, 0, 30)
                    Copy.AutoButtonColor = false
                    Copy.Font = Enum.Font.GothamSemibold
                    Copy.Text = "Copy"
                    Copy.TextColor3 = Color3.fromRGB(200, 210, 220)
                    Copy.TextSize = 14
                    Copy.ZIndex = 16

                    local copyCorner = Instance.new("UICorner")
                    copyCorner.CornerRadius = UDim.new(0, 6)
                    copyCorner.Parent = Copy

                    Copy.MouseButton1Click:Connect(function()
                        if setclipboard then
                            setclipboard(tostring(colorHex.Text))
                            Notify("Colorpicker", "Copied: " .. tostring(colorHex.Text))
                        else
                            print(tostring(colorHex.Text))
                            Notify("Colorpicker", "Clipboard not supported, printed: " .. tostring(colorHex.Text))
                        end
                    end)

                    local ceil, clamp, atan2, pi = math.ceil, math.clamp, math.atan2, math.pi
                    local tostr, sub = tostring, string.sub
                    local fromHSV = Color3.fromHSV
                    local v2, udim2 = Vector2.new, UDim2.new

                    local WheelDown = false
                    local SlideDown = false
                    local color = {hue, sat, val}

                    local function to_hex(color)
                        return string.format("#%02X%02X%02X", color.R * 255, color.G * 255, color.B * 255)
                    end

                    local function update()
                        local c = fromHSV(color[1], color[2], color[3])
                        colorHex.Text = to_hex(c)
                        colorpickerButton.BackgroundColor3 = c
                    end

                    local function UpdateSlide(iX, iY)
                        local y = iY - Darkness.AbsolutePosition.Y
                        local maxY = Darkness.AbsoluteSize.Y
                        y = clamp(y, 0, maxY)
                        y = y / maxY
                        color[3] = 1 - y
                        local realcolor = fromHSV(color[1], color[2], color[3])
                        DarknessCircle.BackgroundColor3 = realcolor
                        DarknessCircle.Position = UDim2.new(0, 0, y, -5)
                        options.callback(realcolor)
                        update()
                    end

                    local function UpdateRing(iX, iY)
                        local x, y = iX - RGB.AbsolutePosition.X, iY - RGB.AbsolutePosition.Y
                        local maxX, maxY = RGB.AbsoluteSize.X, RGB.AbsoluteSize.Y
                        x = clamp(x, 0, maxX)
                        y = clamp(y, 0, maxY)
                        x = x / maxX
                        y = y / maxY
                        color[1] = 1 - x
                        color[2] = 1 - y
                        local realcolor = fromHSV(color[1], color[2], color[3])
                        Darkness.BackgroundColor3 = realcolor
                        DarknessCircle.BackgroundColor3 = realcolor
                        RGBCircle.Position = UDim2.new(x, -8, y, -8)
                        options.callback(realcolor)
                        update()
                    end

                    RGB.MouseButton1Down:Connect(function()
                        WheelDown = true
                        UpdateRing(mouse.X, mouse.Y)
                    end)

                    Darkness.MouseButton1Down:Connect(function()
                        SlideDown = true
                        UpdateSlide(mouse.X, mouse.Y)
                    end)

                    InputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            WheelDown = false
                            SlideDown = false
                        end
                    end)

                    RGB.MouseMoved:Connect(function()
                        if WheelDown then
                            UpdateRing(mouse.X, mouse.Y)
                        end
                    end)

                    Darkness.MouseMoved:Connect(function()
                        if SlideDown then
                            UpdateSlide(mouse.X, mouse.Y)
                        end
                    end)

                    colorpickerButton.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            vis = not vis
                            colorpickerFrame.Visible = vis
                            TweenService:Create(colorpickerLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                                TextColor3 = vis and Color3.fromRGB(200, 210, 220) or Color3.fromRGB(150, 160, 170)
                            }):Play()
                        end
                    end)

                    buttonEffect({frame = colorpickerLabel, entered = Colorpicker})
                    Resize(40)
                end

                function elements:Keybind(options)
                    if not options.text or not options.default or not options.callback then
                        Notify("Keybind Error", "Missing arguments!")
                        return
                    end

                    local blacklisted = {
                        Return = true, Space = true, Tab = true,
                        W = true, A = true, S = true, D = true,
                        I = true, O = true, Unknown = true
                    }

                    local short = {
                        RightControl = "RCtrl", LeftControl = "LCtrl",
                        LeftShift = "LShift", RightShift = "RShift",
                        MouseButton1 = "M1", MouseButton2 = "M2",
                        LeftAlt = "LAlt", RightAlt = "RAlt"
                    }

                    local oldKey = options.default.Name

                    local Keybind = Instance.new("Frame")
                    Keybind.Name = "Keybind"
                    Keybind.Parent = sectionFrame
                    Keybind.BackgroundTransparency = 1
                    Keybind.Size = UDim2.new(0, 215, 0, 35)
                    Keybind.ZIndex = 2

                    local keybindButton = Instance.new("TextButton")
                    keybindButton.Name = "keybindButton"
                    keybindButton.Parent = Keybind
                    keybindButton.BackgroundTransparency = 1
                    keybindButton.Size = UDim2.new(0, 150, 0, 35)
                    keybindButton.AutoButtonColor = false
                    keybindButton.Font = Enum.Font.Gotham
                    keybindButton.Text = options.text
                    keybindButton.TextColor3 = Color3.fromRGB(150, 160, 170)
                    keybindButton.TextSize = 14
                    keybindButton.TextXAlignment = Enum.TextXAlignment.Left

                    local keybindLabel = Instance.new("TextButton")
                    keybindLabel.Name = "keybindLabel"
                    keybindLabel.Parent = Keybind
                    keybindLabel.BackgroundColor3 = Color3.fromRGB(25, 35, 50)
                    keybindLabel.Position = UDim2.new(0.7, 0, 0, 0)
                    keybindLabel.Size = UDim2.new(0, 60, 0, 35)
                    keybindLabel.Font = Enum.Font.Gotham
                    keybindLabel.Text = short[oldKey] or oldKey
                    keybindLabel.TextColor3 = Color3.fromRGB(200, 210, 220)
                    keybindLabel.TextSize = 14
                    keybindLabel.TextXAlignment = Enum.TextXAlignment.Center
                    keybindLabel.AutoButtonColor = false

                    local keybindLabelCorner = Instance.new("UICorner")
                    keybindLabelCorner.CornerRadius = UDim.new(0, 6)
                    keybindLabelCorner.Parent = keybindLabel

                    keybindLabel.MouseButton1Click:Connect(function()
                        keybindLabel.Text = "..."
                        TweenService:Create(keybindButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(200, 210, 220)
                        }):Play()
                        TweenService:Create(keybindLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(200, 210, 220)
                        }):Play()
                        local input = InputService.InputBegan:Wait()
                        if not blacklisted[input.KeyCode.Name] then
                            oldKey = input.KeyCode.Name
                            keybindLabel.Text = short[oldKey] or oldKey
                        end
                        TweenService:Create(keybindButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(150, 160, 170)
                        }):Play()
                        TweenService:Create(keybindLabel, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                            TextColor3 = Color3.fromRGB(200, 210, 220)
                        }):Play()
                    end)

                    InputService.InputBegan:Connect(function(key, focused)
                        if not focused and key.KeyCode.Name == oldKey then
                            options.callback(oldKey)
                        end
                    end)

                    buttonEffect({frame = keybindButton, entered = Keybind})
                    Resize(40)
                end

                return elements
            end

            return sections
        end

        return tabs
    end

    return tabsections
end

return Library
