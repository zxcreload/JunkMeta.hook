# Документация по UI элементам библиотеки lunarlib_solarafix.lua

## Общая информация
Библиотека lunarlib_solarafix.lua предназначена для создания кликгуи в Roblox. Она предоставляет инструменты для создания окон, вкладок, секций и различных элементов управления. Каждый элемент поддерживает флаги для хранения состояния и коллбэки для обработки взаимодействий.

## Иерархия UI элементов
- Window
  - Pages
    - Page
      - Sections
        - Section
          - Elements
            - Toggle
            - Slider
            - Dropdown (или Multibox)
            - Keybind
            - Colorpicker
            - Textbox
            - Button
            - Label
  - KeybindList
  - Notifications

## Методы библиотеки

### Library:Window(Options)
Создает основное окно интерфейса.
- **Параметры**:
  - `Options.Size`: Размер окна (UDim2, по умолчанию UDim2.new(0, 550, 0, 600)).
- **Возвращает**: Объект окна с методами для создания вкладок.

### Library:Notification(message, duration, color, position)
Создает уведомление.
- **Параметры**:
  - `message`: Текст уведомления (строка).
  - `duration`: Длительность отображения (число, по умолчанию 5 секунд).
  - `color`: Цвет прогресс-бара и акцента (Color3, опционально).
  - `position`: Позиция ("Middle" или nil для верхнего левого угла).
- **Возвращает**: Объект уведомления с методом `remove()`.

### Library:ChangeAccent(Color)
Изменяет акцентный цвет интерфейса.
- **Параметры**:
  - `Color`: Новый цвет (Color3).
- **Пример**:
  ```lua
  Library:ChangeAccent(Color3.fromRGB(255, 0, 0)) -- Красный акцент
  ```

### Library:GetConfig()
Получает текущую конфигурацию всех флагов.
- **Возвращает**: Строку с настройками (например, "flag1: bool(true)\nflag2: number(50)").

### Library:LoadConfig(Config)
Загружает конфигурацию из строки.
- **Параметры**:
  - `Config`: Строка с настройками.
- **Пример**:
  ```lua
  Library:LoadConfig("flag1: bool(true)\nflag2: number(50)")
  ```

### Library:KeybindList()
Создает список активных клавиатурных привязок.
- **Методы**:
  - `SetVisible(State)`: Показать/скрыть список (State: boolean).
  - `NewKey(Name, Key, Mode)`: Добавить новый бинд.
    - `Name`: Имя бинда (строка).
    - `Key`: Клавиша (строка, например, "E").
    - `Mode`: Режим ("Hold", "Toggle", "Always").
    - Возвращает объект с методами `SetVisible(State)` и `Update(NewName, NewKey, NewMode)`.

## UI элементы

### Toggle
Переключатель вкл/выкл.
- **Свойства**:
  - `Name`: Название (строка).
  - `State`: Начальное состояние (boolean, по умолчанию false).
  - `Callback`: Функция, вызываемая при изменении состояния (function(state)).
  - `Flag`: Идентификатор для хранения состояния (строка, автоматически генерируется, если не указан).
- **Методы**:
  - `Set(State)`: Установить состояние (boolean).
  - `SetVisible(Bool)`: Показать/скрыть (boolean).
- **Пример**:
  ```lua
  Section:Toggle({
      Name = "Enable Feature",
      State = false,
      Callback = function(state) print("Feature:", state) end,
      Flag = "FeatureToggle"
  })
  ```

### Slider
Ползунок для выбора числового значения.
- **Свойства**:
  - `Name`: Название (строка).
  - `Min`: Минимальное значение (число).
  - `Max`: Максимальное значение (число).
  - `Decimals`: Количество знаков после запятой (число, по умолчанию 0).
  - `State`: Начальное значение (число).
  - `Text`: Формат текста (строка, например, "[value] units").
  - `Callback`: Функция, вызываемая при изменении значения (function(value)).
  - `Flag`: Идентификатор (строка).
- **Методы**:
  - `Set(Value)`: Установить значение (число).
  - `SetVisible(Bool)`: Показать/скрыть (boolean).
- **Пример**:
  ```lua
  Section:Slider({
      Name = "Speed",
      Min = 0,
      Max = 100,
      Decimals = 1,
      State = 50,
      Text = "Speed: [value]",
      Callback = function(value) print("Speed:", value) end,
      Flag = "SpeedSlider"
  })
  ```

### Dropdown (и Multibox)
Выпадающий список для выбора одной или нескольких опций.
- **Свойства**:
  - `Name`: Название (строка).
  - `Options`: Список опций (таблица строк).
  - `Max`: Максимальное количество выбираемых опций (число, если указан, становится multibox).
  - `State`: Начальная опция или опции (строка или таблица для multibox).
  - `Callback`: Функция, вызываемая при выборе (function(option) или function(options) для multibox).
  - `Flag`: Идентификатор (строка).
- **Методы**:
  - `Set(Option)`: Установить выбранную опцию (строка) или опции (таблица для multibox).
  - `Refresh(Options)`: Обновить список опций (таблица).
  - `SetVisible(Bool)`: Показать/скрыть (boolean).
- **Пример (Dropdown)**:
  ```lua
  Section:Dropdown({
      Name = "Weapon",
      Options = {"Pistol", "Rifle", "Shotgun"},
      State = "Pistol",
      Callback = function(option) print("Selected:", option) end,
      Flag = "WeaponDropdown"
  })
  ```
- **Пример (Multibox)**:
  ```lua
  Section:Dropdown({
      Name = "Perks",
      Options = {"Speed", "Strength", "Health"},
      Max = 2,
      State = {"Speed", "Health"},
      Callback = function(options) print("Perks:", table.concat(options, ", ")) end,
      Flag = "PerksMultibox"
  })
  ```

### Keybind
Привязка клавиш с различными режимами.
- **Свойства**:
  - `Name`: Название (строка).
  - `State`: Начальная клавиша (Enum.KeyCode или Enum.UserInputType).
  - `Mode`: Режим ("Hold", "Toggle", "Always", по умолчанию "Toggle").
  - `UseKey`: Использовать только клавишу без состояния (boolean, по умолчанию false).
  - `Callback`: Функция, вызываемая при активации (function(state) или function(key) для UseKey).
  - `Flag`: Идентификатор (строка).
- **Методы**:
  - `Set(Key)`: Установить клавишу или режим (Enum.KeyCode, Enum.UserInputType, или строка "Hold"/"Toggle"/"Always").
- **Пример**:
  ```lua
  Section:Keybind({
      Name = "Sprint",
      State = Enum.KeyCode.LeftShift,
      Mode = "Hold",
      Callback = function(state) print("Sprinting:", state) end,
      Flag = "SprintKeybind"
  })
  ```

### Colorpicker
Выбор цвета с поддержкой прозрачности.
- **Свойства**:
  - `Name`: Название (строка).
  - `State`: Начальный цвет (Color3, по умолчанию Color3.fromRGB(255, 0, 0)).
  - `Alpha`: Начальная прозрачность (число от 0 до 1, по умолчанию 1).
  - `Callback`: Функция, вызываемая при изменении цвета (function(color, alpha)).
  - `Flag`: Идентификатор (строка).
- **Методы**:
  - `Set(Color)`: Установить цвет (Color3).
- **Пример**:
  ```lua
  Section:Colorpicker({
      Name = "ESP Color",
      State = Color3.fromRGB(0, 255, 0),
      Alpha = 0.5,
      Callback = function(color, alpha) print("Color:", color, "Alpha:", alpha) end,
      Flag = "ESPColor"
  })
  ```

### Textbox
Текстовое поле для ввода.
- **Свойства**:
  - `Name`: Название (строка).
  - `Placeholder`: Текст подсказки (строка, по умолчанию "").
  - `State`: Начальный текст (строка, по умолчанию "").
  - `Callback`: Функция, вызываемая при вводе (function(text)).
  - `Flag`: Идентификатор (строка).
- **Методы**:
  - `Set(Text)`: Установить текст (строка).
- **Пример**:
  ```lua
  Section:Textbox({
      Name = "Username",
      Placeholder = "Enter username",
      State = "",
      Callback = function(text) print("Username:", text) end,
      Flag = "UsernameTextbox"
  })
  ```

### Button
Кнопка для выполнения действия.
- **Свойства**:
  - `Name`: Название (строка).
  - `Callback`: Функция, вызываемая при нажатии (function()).
- **Пример**:
  ```lua
  Section:Button({
      Name = "Reset",
      Callback = function() print("Reset clicked") end
  })
  ```

### Label
Текстовная метка.
- **Свойства**:
  - `Name`: Текст метки (строка).
  - `Centered`: Центрировать текст (boolean, по умолчанию false).
- **Пример**:
  ```lua
  Section:Label({
      Name = "Status: Active",
      Centered = true
  })
  ```

## Работа с элементами

1. **Создание**:
   - Элементы создаются через методы секции (`Section:Toggle`, `Section:Slider` и т.д.).
   - Каждый элемент принимает таблицу свойств (Properties), где указываются параметры (Name, State, Callback, Flag и т.д.).

2. **Флаги**:
   - Флаги используются для хранения состояния элементов (например, `Library.Flags["FlagName"]`).
   - Для большинства элементов можно вызывать функцию флага напрямую:
     ```lua
     Library.Flags["SpeedSlider"](75) -- Установить значение слайдера
     ```

3. **Коллбэки**:
   - Коллбэки вызываются при взаимодействии с элементом (например, изменение состояния тоггла или выбор опции в дропдауне).
   - Пример:
     ```lua
     Callback = function(value) print("New value:", value) end
     ```

4. **Скрытие/показ**:
   - Большинство элементов поддерживают метод `SetVisible(Bool)` для управления видимостью.

5. **Интерактивность**:
   - Элементы реагируют на события мыши (вход, выход, клики).
   - Поддерживается изменение цвета текста или рамки при наведении (обычно на акцентный цвет).

## Примечания
- **Multibox**: Поддерживается через параметр `Max` в `Dropdown`. Позволяет выбирать несколько опций.
- **ThemeManager**: Ограничен изменением акцентного цвета через `ChangeAccent`. Полноценного переключения тем нет.
- **ConfigManager**: Поддерживается через `GetConfig` и `LoadConfig` для сохранения и загрузки настроек.
- **Шрифты**: Используется кастомный шрифт (rbxassetid://12187371840) с настраиваемым размером (`Library.FontSize`).

## Пример использования
```lua
local Library = require(script.lunarlib_solarafix)
local Window = Library:Window({ Size = UDim2.new(0, 600, 0, 400) })
local Page = Window:Page({ Name = "Main" })
local Section = Page:Section({ Name = "Settings", Side = "Left" })

Section:Toggle({
    Name = "God Mode",
    State = false,
    Callback = function(state) print("God Mode:", state) end
})

Section:Slider({
    Name = "FOV",
    Min = 30,
    Max = 120,
    State = 70,
    Callback = function(value) print("FOV:", value) end
})

Section:Dropdown({
    Name = "Team",
    Options = {"Red", "Blue", "Green"},
    State = "Blue",
    Callback = function(option) print("Team:", option) end
})
```
